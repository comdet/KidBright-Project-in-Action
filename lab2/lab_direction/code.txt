----------------------------
{
	"name": {
		"en": "LED control",
		"th": "ควบคุม LED"
	},
	"color": 160
}
----------------------------
Blockly.Blocks['blink_start'] = {
	init: function() {
	  	this.appendDummyInput()
		  .appendField("เปิดไฟกระพริบ");
	  	this.setPreviousStatement(true, null);
	  	this.setNextStatement(true, null);
	  	this.setColour(135);
   		this.setTooltip("เริ่มแสดงไฟกระพริบ");
		   this.setHelpUrl("");
	}
};

Blockly.Blocks['blink_stop'] = {
	init: function() {
	  	this.appendDummyInput()
		  .appendField("ปิดไฟกระพริบ");
	  	this.setPreviousStatement(true, null);
	  	this.setNextStatement(true, null);
	  	this.setColour(135);
   		this.setTooltip("หยุดแสดงไฟกระพริบ");
		   this.setHelpUrl("");
	}
};
-----------------------------
Blockly.JavaScript['blink_start'] = function(block) {
    var code = 'DEV_IO.BLINK().setOutput(1);\n';
	return code;
};

Blockly.JavaScript['blink_stop'] = function(block) {
    var code = 'DEV_IO.BLINK().setOutput(2);\n';
	return code;
};
------------------------------
#ifndef __BLINK_H__
#define __BLINK_H__
#include "driver.h"
#include "device.h"
#include "driver/gpio.h"
class BLINK : public Device {
	private:
		enum {
			s_detect, s_blink
		} state;
		int blink_status;
		bool blink_flag;

	public:
		TickType_t tickcnt;
		// constructor
		BLINK(void);
		// override
		void init(void);
		void process(Driver *drv);
		int prop_count(void);
		bool prop_name(int index, char *name);
		bool prop_unit(int index, char *unit);
		bool prop_attr(int index, char *attr);
		bool prop_read(int index, char *value);
		bool prop_write(int index, char *value);
		// method
		void start(void);
		void stop(void);
};
#endif
------------------------------
#include "esp_system.h"
#include "kidbright32.h"
#include "blink.h"

BLINK::BLINK(void) {
	//
}

void BLINK::init(void) {
	gpio_config_t io_conf;

	// outputs init
	io_conf.intr_type = GPIO_INTR_DISABLE;          // disable interrupt
	io_conf.mode = GPIO_MODE_OUTPUT;                // set as output mode
	io_conf.pin_bit_mask = (1ULL << BT_LED_GPIO);   // pin bit mask
	io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE;   // disable pull-down mode
	io_conf.pull_up_en = GPIO_PULLUP_DISABLE;       // disable pull-up mode
	blink_status = 1;
	gpio_set_level(BT_LED_GPIO, blink_status);      // active low
	gpio_config(&io_conf);

	blink_flag = false;
	state = s_detect;
}

int BLINK::prop_count(void) {
	// not supported
	return 0;
}

bool BLINK::prop_name(int index, char *name) {
	// not supported
	return false;
}

bool BLINK::prop_unit(int index, char *unit) {
	// not supported
	return false;
}

bool BLINK::prop_attr(int index, char *attr) {
	// not supported
	return false;
}

bool BLINK::prop_read(int index, char *value) {
	// not supported
	return false;
}

bool BLINK::prop_write(int index, char *value) {
	// not supported
	return false;
}

void BLINK::process(Driver *drv) {
	switch (state) {
		case s_detect:
			// clear error flag
			error = false;
			// set initialized flag
			initialized = true;

			// go to blink state
			state = s_blink;
			break;

		case s_blink:
			if (blink_flag) {
				if (is_tickcnt_elapsed(tickcnt, 1000)) {
					blink_status ^= 0x01; // toggle status
					gpio_set_level(BT_LED_GPIO, blink_status);
					// get current tickcnt
					tickcnt = get_tickcnt();
				}
			}
			break;
	}
}

void BLINK::start(void) {
	blink_status = 0;
	gpio_set_level(BT_LED_GPIO, blink_status); // active low
	// get current tickcnt
	tickcnt = get_tickcnt();
	blink_flag = true;
}

void BLINK::stop(void) {
	blink_flag = false;
	blink_status = 1;
	gpio_set_level(BT_LED_GPIO, blink_status); // active low
}
----------------------------------------
